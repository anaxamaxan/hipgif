{
  "name": "atlassian-connect-express-hipchat",
  "version": "0.2.1",
  "description": "HipChat compatibility layer for atlassian-connect-express (ACE)",
  "main": "index.js",
  "dependencies": {
    "request": "^2.16.6",
    "lodash": "^2.4.1",
    "rsvp": "^2.0.1",
    "jwt-simple": "^0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://bitbucket.org/hipchat/atlassian-connect-express-hipchat"
  },
  "keywords": [
    "atlassian",
    "connect",
    "express",
    "hipchat"
  ],
  "author": {
    "name": "Rich Manalang"
  },
  "license": "Apache 2.0",
  "readme": "# atlassian-connect-express-hipchat: Node.js module for Express based HipChat Connect Add-ons\n\n[![Build Status](https://drone.io/bitbucket.org/hipchat/atlassian-connect-express-hipchat/status.png)](https://drone.io/bitbucket.org/hipchat/atlassian-connect-express-hipchat/latest)\n\n`atlassian-connect-express-hipchat` is an NPM module for creating [HipChat Connect](https://www.hipchat.com/docs/apiv2/addons) Add-ons with [Node.js](http://nodejs.org/). HipChat Connect is a variant of [Atlassian Connect](https://developer.atlassian.com/static/connect/docs/) and `atlassian-connect-express-hipchat` is a HipChat compatibility layer on top of [atlassian-connect-express](https://bitbucket.org/atlassian/atlassian-connect-express) (aka, ACE).\n\n## More about `atlassian-connect-express-hipchat`\n\nThe `atlassian-connect-express-hipchat` package helps you get started developing add-ons quickly, using Node.js and Express as the add-on server.  \n\nIt's important to understand that [Express](http://expressjs.com/) by itself is a web app framework for Node. `atlassian-connect-express-hipchat` just provides a library of middleware and convenience helpers that make it easier to build HipChat add-ons. Specifically, `atlassian-connect-express-hipchat` adds:\n\n* Automatic JWT authentication of inbound requests\n* Automatic persistence of host details (i.e., client information)\n* HipChat client for communicating with the HipChat REST API\n\n## Getting Started\n\nThe fastest way to get started is to install the `atlas-connect` CLI tool. The CLI makes it possible to generate a `atlassian-connect-express-hipchat` enabled add-on scaffold very quickly. To install:\n\n    npm i -g atlas-connect\n\n### Create a project\n\nLet's start by creating an add-on project:\n\n    atlas-connect new -t hipchat <project_name>\n\nThis creates a new project home directory with the following contents:\n\n    .\n    ├── Procfile\n    ├── README.md\n    ├── app.js\n    ├── atlassian-connect.json\n    ├── config.json\n    ├── lib\n    │   └── hipchat.js\n    ├── package.json\n    ├── public\n    │   ├── css\n    │   │   └── addon.css\n    │   └── js\n    │       └── addon.js\n    ├── routes\n    │   └── index.js\n    └── views\n        ├── config.hbs\n        └── layout.hbs\n\n### Install dependencies\n\nChange to the new project directory and install dependencies:\n\n    npm install\n\n### Setting up a development environment\n\nThe development workflow for building HipChat add-ons is rad. You can build your add-on locally while running it inside of <https://hipchat.com>. To do this, you'll need to expose your local webserver to the internet. An easy way to do this is to use a [local tunnel](http://en.wikipedia.org/wiki/Tunneling_protocol). We highly recommend using [ngrok](https://ngrok.com/). `ngrok` is a simple client tool that allows you to forward internet requests on an ngrok subdomain to your local server:\n\n    ngrok -subdomain <subdomain-name> <port>\n\n### Running your Add-on Server\n\nOnce you've started your tunnel, you can run your add-on server:\n\n    AC_LOCAL_BASE_URL=https://<subdomain>.ngrok.com node app.js\n\nThis will boot up your add-on server on the default port of 3000. The `AC_LOCAL_BASE_URL` environment variable tells your add-on to use the specified base URL instead of <http://localhost:3000>.\n\n### The Dev Loop\n\nAt this point, you can start building your add-on. Changes to views load automatically, however, if you make changes to any JavaScript, you need to restart your add-on server. If you want your server to automatically restart when your JavaScript changes, consider using [nodemon](https://npmjs.org/package/nodemon).\n\n    AC_LOCAL_BASE_URL=https://<subdomain>.ngrok.com nodemon app.js\n\n### Registering your Add-on with HipChat\n\nTo get your add-on into HipChat, you have to register your addon's `atlassian-connect.json` descriptor. This descriptor will be accessible through:\n\n    https://<subdomain>.ngrok.com/atlassian-connect.json\n\nHipChat add-ons can operate inside a room or within the entire account. When developing, you should probably register your add-on inside a room you've created just for testing. Also, you can only register add-ons inside a room where you are an administrator.\n\nTo register your add-on descriptor, navigate to the rooms administration page:\n\n    https://<your-account>.hipchat.com/rooms\n\nThen select one of your rooms in the list. In the following page, select `Add-ons` in the sidebar:\n\n![Add-on administration](http://f.cl.ly/items/1w2S2z2c3g0k031x3S1d/HipChat%20-%20HipChat%20Add-ons%202014-02-11%2010-32-48.png)\n\nBelow the page, you'll find the **Create new private add-ons** form. Paste your descriptor URL in the **Capabilities URL** field then save. This will initiate the installation of your add-on inside the room.\n\n### Configuration\n\nThe configuration for your add-on is done in two files:\n\n* `./config.json` -- This file contains the configuration for each runtime environment your add-on runs in. The file has comments to help you understand available settings.\n* `./atlassian-connect.json` -- This file is a manifest of all the extension points your add-on uses. To see all of the available extension point options, take a look at the [HipChat Add-on Capabilities page](https://www.hipchat.com/docs/apiv2/method/get_capabilities).\n\n#### config.json\n\nThe `./config.json` file contains all of the settings for the add-on server. This file is divided into runtime environments. The default template includes `development` and `production`, but you're free to add any other environments you'd like to use.\n\nTo run your add-on in a specific environment, use the `NODE_ENV` environment variable:\n\n    NODE_ENV=<environment> AC_LOCAL_BASE_URL=https://<subdomain>.ngrok.com nodemon app.js\n\n\n### atlassian-connect.json\n\nThe `atlassian-connect.json` describes what your add-on will do. There are two main parts to the descriptor: meta information that describes your add-on (i.e., name, description, key, etc.) and a list of the modules your add-on will provide. This descriptor is registered with HipChat when your add-on is installed.\n\nTo see all of the available settings in the `atlassian-connect.json`, take a look at the [HipChat Add-on Capabilities page](https://www.hipchat.com/docs/apiv2/method/get_capabilities).\n\n## Sample Add-ons using `atlassian-connect-express-hipchat`\n\n* [GitHub](https://bitbucket.org/hipchat/hipchat-github-addon) -- get notified of events that happen on GitHub inside your HipChat rooms\n* [Instagram](https://bitbucket.org/hipchat/hipchat-instagram-addon) -- get room notifications when someone posts a photo matching a tag you're watching\n* [Chatty](https://bitbucket.org/hipchat/chatty) -- Chatty is a HipChat add-on that aims to replace [hubot-hipchat](https://github.com/hipchat/hubot-hipchat). Since the `hubot-hipchat` adapter has proven difficult to maintain and set up, this attempts to provide much of the same functionality using HipChat's add-on system.\n\n## The `atlassian-connect-express-hipchat` scaffold\n\nWhen you generate a new `atlassian-connect-express-hipchat` add-on, you're actually just downloading a copy of the [Atlassian Connect Expressjs template](https://bitbucket.org/atlassian/atlassian-connect-express-template/src/hipchat/).\n\n### Handlebars layouts and templates\n\nThe base scaffold uses the [Handlebars](http://handlebarsjs.com) template library via the [express-hbs](https://github.com/barc/express-hbs) package.\n\nHandlebars views are stored in the `./views` directory. The base template contains a `layout.hbs` and a configuration page (`config.hbs`). Handlebars alone doesn't provide layouts, but the `express-hbs` package does. To apply the `layout.hbs` layout to your template page, just add the following to the top of your template:\n\n    {{!< layout}}\n\nTo learn more about how Handlebars works in Expressjs, take a look at the [express-hbs documentation](https://github.com/barc/express-hbs#readme).\n\n### Special context variables\n\n`atlassian-connect-express-hipchat` injects a handful of useful context variables into your render context. You can access any of these within your templates:\n\n* `title`: the add-on's name (derived from `atlassian-connect.json`)\n* `appKey`: the application key defined in `atlassian-connect.json`\n* `localBaseUrl`: the base URI of the add-on\n* `hostStylesheetUrl`: the URL to the base CSS file for Connect add-ons. This stylesheet is a bare minimum set of styles to help you get started. It's not a full AUI stylesheet.\n* `hostScriptUrl`: the URL to the Connect JS client. This JS file contains the code that will establish the seamless iframe bridge between the add-on and its parent. It also contains a handful of methods and objects for accessing data through the parent (look for the `AP` JS object).\n* `signed_request`: a JWT token that can be used to authenticate calls from the iframe back to the add-on service.\n\nYou can access any of the variables above as normal Handlebars variables. For example, to generate a link in your page that links elsewhere in the host:\n\n    <a href=\"{{hostBaseUrl}}/config\">Configuration</a>\n\n## Recipes\n\n### How to secure a route with JWT\n\nAdd-ons are authenticated through [JWT](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-15). To simplify JWT verification on your routes, you can simply add a `atlassian-connect-express-hipchat` middleware to your route:\n\n    module.exports = function (app, addon) {\n        app.get('/protected-resource',\n\n            // Protect this resource with JWT\n            addon.authenticate(),\n\n            function(req, res) {\n              res.render('protected');\n            }\n        );\n    };\n\nSimply adding the `addon.authenticate()` middleware will protect your resource. It will also make available some useful `request` properties that will be useful in your app:\n\n* `req.clientInfo`: useful information about the add-on client such as the clientKey, oauth info, and HipChat account info\n* `req.context`: contains the context data accompanying the request like the roomId\n\nIt also populates the `res.signed_request` property that can be used to expose the JWT token to your pages for subsequent requests back to your add-on server.\n\n### How to send a signed HTTP request from the iframe back to the add-on service\n\nThe initial call to load the iframe content is secured by JWT, as described above. However, the loaded content cannot sign subsequent requests. A typical example is content that makes AJAX calls back to the add-on. Cookie sessions cannot be used, as many browsers block third-party cookies by default. `atlassian-connect-express-hipchat` provides middleware that works without cookies and helps making secure requests from the iframe.\n\nA route can be secured by adding the `addon.authenticate()` middleware:\n\n    module.exports = function (app, addon) {\n        app.get('/protected-resource',\n\n            // Require a valid token to access this resource\n            addon.authenticate(),\n\n            function(req, res) {\n              res.render('protected');\n            }\n        );\n    };\n\nIn order to secure your route, the token must be part of the HTTP request back to the add-on service. This can be done by using a query parameter:\n\n    <a href=\"/protected-resource?signed_request={{signed_request}}\">See more</a>\n\nThe second option is to use an HTTP header, e.g. for AJAX requests:\n\n    beforeSend: function (request) {\n        request.setRequestHeader(\"X-acpt\", {{token}});\n    }\n\nYou can embed the token anywhere in your iframe content using the `token` content variable. For example, you can embed it in a meta tag, from where it can later be read by a script:\n\n    <meta name=\"acpt\" content=\"{{signed_request}}\">\n\nBoth the query parameter `acpt` and the HTTP request header `X-acpt` are automatically recognized and handled by `atlassian-connect-express-hipchat` when a route is secured with the `addon.authenticate()` middleware. The token remains valid for 15 minutes by default, and is automatically refreshed on each call. The expiration of the token can be configured using `maxTokenAge` (in seconds) inside `config.json`.\n\n### How to send a signed outbound HTTP request back to the host\n\n`atlassian-connect-express-hipchat` bundles and extends the [request](https://github.com/mikeal/request) HTTP client. To make a request back to the HipChat, all you have to do is use `request` the way it was designed. REST calls back to HipChat require that you use the `access_token` provided to you at installation.\n\nTo make things easier, we've provided a simple HipChat client for sending messages found inside `./lib/hipchat.js`. To use this, all you have to do is:\n\n    var hipchat = require('../lib/hipchat')(addon);\n    \n    // This is an example route to handle an incoming webhook\n    app.post('/webhook',\n        addon.authenticate(),\n        function(req, res) {\n          hipchat.sendMessage(req.clientInfo, req.context.item.room.id, 'pong')\n            .then(function(data){\n              res.send(200);\n            });\n        }\n    );\n\n### How to persist data for your add-on\n\n`atlassian-connect-express-hipchat` bundles a [Redis](http://redis.io/) [adapter](https://bitbucket.org/atlassianlabs/atlassian-connect-express-redis). *To use Redis with your add-on, you should install Redis locally.*\n\nYou don't have to use Redis, but the default template makes use of Redis. Redis is awesome for building add-ons, but you're free to use whatever you'd like. We also bundle [JugglingDB](http://jugglingdb.co/) (a cross-database ORM for nodejs) which works with a variety of databases.\n\nIf you choose to use Redis, congratulations on *doing the right thing*. But more importantly, you might also want to use [redis-commander](https://github.com/joeferner/redis-commander) to manage your Redis data. It's extremely helpful to see what's getting stored in your DB.\n\n### How to deploy to Heroku\nBefore you start, install Git and the [Heroku Toolbelt](https://toolbelt.heroku.com/).\n\nIf you aren't using git to track your add-on, now is a good time to do so as it is required for Heroku. Ensure you are in your project home directory and run the following commands:\n\n    git config --global user.name \"John Doe\"\n    git config --global user.email johndoe@example.com\n    ssh-keygen -t rsa\n    git init\n    git add .\n    git commit . -m \"some message\"\n    heroku keys:add\n\nNext, create the app on Heroku:\n\n    heroku apps:create <add-on-name>\n\nThen set the public and private key as environment variables in Heroku (you don't ever want to commit these `*.pem` files into your scm). The two `.*pem` files were created in your project home directory when you ran the `atlas-connect new` command. \n\n    heroku config:set AC_LOCAL_BASE_URL=https://<subdomain> herokuapp.com --app <add-on-name>\n    heroku config:set DATABASE_URL=<DB URL> --app <add-on-name>\n\nLastly, let's add the project files to Heroku and deploy! \n\nIf you aren't already there, switch to your project home directory. From there, run these commands:\n\n    git remote add heroku git@heroku.com:<add-on-name>.git\n    git push heroku master\n\nIt will take a minute or two for Heroku to spin up your add-on. When it's done, you'll be given the URL where your add-on is deployed, however, you'll still need to register the `atlassian-connect.json` descriptor on HipChat.\n\nFor further detail, we recommend reading [Getting Started with Node.js on Heroku](https://devcenter.heroku.com/articles/getting-started-with-nodejs).\n\n## Troubleshooting\n\n### Debugging HTTP Traffic\n\nIf you're using `ngrok`, you can point your browser to <http://localhost:4040> to access `ngrok`'s built-in traffic analyzer.\n\n## Getting Help or Support\n\nYou can get help by emailing <atlassian-connect-dev@googlegroups.com> or [report bugs](https://bitbucket.org/hipchat/atlassian-connect-express-hipchat/issues?status=new&status=open). If you want to learn more about HipChat Connect, you can visit <https://www.hipchat.com/docs/apiv2/addons>.\n\n## Contributing\n\nEven though this is just an exploratory project at this point, it's also open source [Apache 2.0](https://bitbucket.org/atlassian/atlassian-connect-express-hipchat/src/master/LICENSE.txt). So, please feel free to fork and send us pull requests.\n",
  "readmeFilename": "README.md",
  "_id": "atlassian-connect-express-hipchat@0.2.1",
  "_from": "atlassian-connect-express-hipchat@>=0.2.0-0 <0.3.0-0"
}
